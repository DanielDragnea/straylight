# The directories containing the source files, separated by ':'
VPATH=src

# To make "debug" the default configuration if invoked with just "make":
#
ifeq ($(CFG),)
CFG=debug
endif

# The source files: regardless of where they reside in the source tree,
# VPATH will locate them...
#    main.cpp

Group0_SRC = \
    benchmark.cpp \
    harvey_psf.cpp \
    harvey_brdf.cpp \
    debug_messages.cpp \
    tis_surface_scattering_harvey.cpp \
    particulate_contamination_harvey_psf.cpp \
    forward_model_single_psf_dual_resolution.cpp \
    forward_model_single_psf_dual_resolution_noSSE.cpp \
    StringSplit.cpp

# Build a Dependency list and an Object list, by replacing the .cpp
# extension to .d for dependency files, and .o for object files.
Group0_DEP = $(patsubst %.cpp, deps.$(CFG)/Group0_%.d, ${Group0_SRC})
Group0_OBJ = $(patsubst %.cpp, objs.$(CFG)/Group0_%.o, ${Group0_SRC})

# Your final binary
TARGET=strayLight

# What compiler to use for generating dependencies: 
# it will be invoked with -MM -MP
CXXDEP = g++

# What include flags to pass to the compiler
INCLUDEFLAGS= -I src

# Separate compile options per configuration
ifeq ($(CFG),debug)
CXXFLAGS += -g -Wall -D_DEBUG ${INCLUDEFLAGS}
CXXSAFEFLAGS += -g -Wall -D_DEBUG ${INCLUDEFLAGS}
else
CXXFLAGS += -O2 -Wall -DUSE_OPENMP -fopenmp -mtune=native -msse -msse2 ${INCLUDEFLAGS}
CXXSAFEFLAGS += -O2 -Wall ${INCLUDEFLAGS}
LDFLAGS += -fopenmp
endif

# A common link flag for all configurations
LDFLAGS += -g -lfftw3f -lrt

all:	inform bin.$(CFG)/${TARGET}

release:
	$(MAKE) CFG=release

output/stage1:	bin.$(CFG)/$(TARGET)
	bin.$(CFG)/$(TARGET)
	ctags -R .

tests:	| output/stage1
	for i in {1..12} ; do if [ -f output/stage$$i ] ; then ../Python/differ.py output/stage$$i /data/ESA/stage$$i || { echo Failed in stage$$i ; break ; } ; fi ; done

inform:
ifneq ($(CFG),release)
ifneq ($(CFG),debug)
	@echo "Invalid configuration "$(CFG)" specified."
	@echo "You must specify a configuration when running make, e.g."
	@echo  "make CFG=debug"
	@echo  
	@echo  "Possible choices for configuration are 'release' and 'debug'"
	@exit 1
endif
endif
	@echo "Configuration "$(CFG)
	@echo "------------------------"

bin.$(CFG)/${TARGET}: ${Group0_OBJ} | inform
	@mkdir -p $(dir $@)
	$(CXX) -g -o $@ $^ ${LDFLAGS}

objs.$(CFG)/Group0_%.o: %.cpp
	@mkdir -p $(dir $@)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

objs.$(CFG)/Group0_forward_model_single_psf_dual_resolution_noSSE.o: forward_model_single_psf_dual_resolution_noSSE.cpp
	@mkdir -p $(dir $@)
	$(CXX) -c $(CXXSAFEFLAGS) -o $@ $<

deps.$(CFG)/Group0_%.d: %.cpp
	@mkdir -p $(dir $@)
	@echo Generating dependencies for $<
	@set -e ; $(CXXDEP) -MM -MP $(INCLUDEFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,objs.$(CFG)\/Group0_\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

clean:
	@rm -rf \
	deps.debug objs.debug bin.debug \
	deps.release objs.release bin.release

# Unless "make clean" is called, include the dependency files
# which are auto-generated. Don't fail if they are missing
# (-include), since they will be missing in the first invocation!
ifneq ($(MAKECMDGOALS),clean)
-include ${Group0_DEP}
endif
